<Project>

  <PropertyGroup>
    <!-- Ensure that projects rebuild if this file changes. -->
    <MsBuildAllProjects>$(MsBuildAllProjects);$(MsBuildThisFileFullPath)</MsBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Default behaviour if not specified by build environment, csproj, or user props files -->

    <!-- Lock file is applied to restore if it exists. -->
    <ApplyLockFile Condition=" '$(ApplyLockFile)' == '' ">true</ApplyLockFile>

    <!--
      Creating and updating lock file does not happen automatically.
      Setting this to true as an msbuild /p:GenerateLockFile=true or calling msbuild /t:GenerateLockFile will do a
      one-time update of the nuget.lock.props.
      Setting this to true in the csproj or a common user props file will automatically create and update the lock
      file -->
    <GenerateLockFile Condition=" '$(GenerateLockFile)' == '' ">false</GenerateLockFile>

    <!--
      Ensure that all of the packages being used are allowed
    -->
    <VerifyLockFile Condition=" '$(VerifyLockFile)' == '' ">false</VerifyLockFile>

  </PropertyGroup>

  <!-- COMMON TARGETS -->

  <UsingTask TaskName="Microsoft.NET.Build.Tasks.ResolvePackageDependencies" AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />
  
  <Target Name="LoadProjectAssetsFile">
    <ResolvePackageDependencies ProjectPath="$(MSBuildProjectFullPath)" ProjectAssetsFile="$(ProjectAssetsFile)" ProjectLanguage="$(Language)" ContinueOnError="ErrorAndContinue">
      <Output TaskParameter="TargetDefinitions" ItemName="AssetsTargetDefinitions" />
      <Output TaskParameter="PackageDefinitions" ItemName="AssetsPackageDefinitionsTemp" />
      <Output TaskParameter="PackageDependencies" ItemName="AssetsPackageDependencies" />
    </ResolvePackageDependencies>
    <ResolvePackageDependenciesMore ProjectAssetsFile="$(ProjectAssetsFile)" InputPackageDefinitions="@(AssetsPackageDefinitionsTemp)">
      <Output TaskParameter="OutputPackageDefinitions" ItemName="AssetsPackageDefinitions" />
    </ResolvePackageDependenciesMore>
    <ItemGroup>
      <EveryDependency Include="@(AssetsPackageDependencies)" />
    </ItemGroup>
  </Target>

  <Target Name="JoinPackageDefinitions" Inputs="@(AssetsPackageDefinitions)" Outputs="%(AssetsPackageDefinitions.Identity)">
    <PropertyGroup>
      <_PackageDefinitions_Identity>%(AssetsPackageDefinitions.Identity)</_PackageDefinitions_Identity>
      <_PackageDefinitions_Type>%(AssetsPackageDefinitions.Type)</_PackageDefinitions_Type>
      <_PackageDefinitions_Name>%(AssetsPackageDefinitions.Name)</_PackageDefinitions_Name>
      <_PackageDefinitions_Version>%(AssetsPackageDefinitions.Version)</_PackageDefinitions_Version>
      <_PackageDefinitions_Sha512>%(AssetsPackageDefinitions.Sha512)</_PackageDefinitions_Sha512>
    </PropertyGroup>
    <ItemGroup>
      <EveryDependency Condition=" '%(Identity)' == '$(_PackageDefinitions_Identity)' ">
        <Type>$(_PackageDefinitions_Type)</Type>
        <Name>$(_PackageDefinitions_Name)</Name>
        <Version>$(_PackageDefinitions_Version)</Version>
        <Sha512>$(_PackageDefinitions_Sha512)</Sha512>
      </EveryDependency>
    </ItemGroup>
  </Target>

  <Target Name="JoinTargetDefinitions" Inputs="@(AssetsTargetDefinitions)" Outputs="%(AssetsTargetDefinitions.Identity)">
    <PropertyGroup>
      <_TargetDefinitions_Identity>%(AssetsTargetDefinitions.Identity)</_TargetDefinitions_Identity>
      <_TargetDefinitions_TargetFrameworkMoniker>%(AssetsTargetDefinitions.TargetFrameworkMoniker)</_TargetDefinitions_TargetFrameworkMoniker>
      <_TargetDefinitions_RuntimeIdentifier>%(AssetsTargetDefinitions.RuntimeIdentifier)</_TargetDefinitions_RuntimeIdentifier>
    </PropertyGroup>
    <ItemGroup>
      <EveryDependency Condition=" '%(ParentTarget)' == '$(_TargetDefinitions_Identity)' ">
        <TargetFrameworkMoniker>$(_TargetDefinitions_TargetFrameworkMoniker)</TargetFrameworkMoniker>
        <RuntimeIdentifier>$(_TargetDefinitions_RuntimeIdentifier)</RuntimeIdentifier>
      </EveryDependency>
    </ItemGroup>
  </Target>

  <Target Name="CalculateAssets" DependsOnTargets="LoadProjectAssetsFile;JoinPackageDefinitions;JoinTargetDefinitions" />

  <UsingTask
    TaskName="SortItemGroup"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <UnsortedItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OrderBy Required="true" />
      <SortedItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Code Type="Fragment" Language="cs">
          <![CDATA[
            SortedItems = new Microsoft.Build.Framework.ITaskItem[UnsortedItems.Length];
            var Keys = new string[UnsortedItems.Length];
            for(var index = 0; index < UnsortedItems.Length; index++)
            {
              SortedItems[index] = UnsortedItems[index];
              Keys[index] = UnsortedItems[index].GetMetadata(OrderBy);
            }
            Array.Sort(Keys, SortedItems);
          ]]>
      </Code>
    </Task>
  </UsingTask>

   <UsingTask
    TaskName="ResolvePackageDependenciesMore"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <ProjectAssetsFile Required="true" />
      <InputPackageDefinitions ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputPackageDefinitions ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
    <!-- <ResolvePackageDependenciesMore ProjectAssetsFile="$(ProjectAssetsFile)" InputPackageDefinitions="@(AssetsPackageDefinitionsTemp)">
      <Output TaskParameter="OutputPackageDefinitions" ItemName="AssetsPackageDefinitions" />
    </ResolvePackageDependenciesMore> -->
      <Reference Include="C:\Program Files (x86)\Microsoft SDKs\NuGetPackages\newtonsoft.json\9.0.1\lib\net45\Newtonsoft.Json.dll" />
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Collections.Generic"/>
      <Using Namespace="Newtonsoft.Json"/>
      <Using Namespace="Newtonsoft.Json.Linq"/>
      <Code Type="Fragment" Language="cs">
          <![CDATA[
            OutputPackageDefinitions = InputPackageDefinitions;

            var jsonText = File.ReadAllText(ProjectAssetsFile);
            var assets = JToken.Parse(jsonText);

            foreach(var definition in OutputPackageDefinitions)
            {
              // Log.LogWarning(definition.ItemSpec); 
              var libraries = assets["libraries"]; 
              var library = libraries[definition.ItemSpec]; 
              var sha512 = library.Value<string>("sha512");
              definition.SetMetadata("Sha512", sha512);
            } 
          ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- GENERATE -->

  <PropertyGroup>
    <GenerateLockFileDependsOn>LoadProjectAssetsFile;JoinPackageDefinitions;JoinTargetDefinitions;$(GenerateLockFileDependsOn);</GenerateLockFileDependsOn>
  </PropertyGroup>

  <Target Name="GenerateLockFile" DependsOnTargets="$(GenerateLockFileDependsOn)" Inputs="$(ProjectAssetsFile)" Outputs="$(ProjectLockFile)$(RegenerateLockFile)">
    <Message Text="%(MoreDefinitions.Identity) %(MoreDefinitions.Sha512)" Importance="high" />
    
    <ItemGroup>
      <DependenciesToLock Include="@(EveryDependency)" Condition=" '%(Type)' == 'package' and '%(ParentPackage)' == '' and '%(RuntimeIdentifier)' == '' ">
        <OrderBy>%(Name) %(Version) %(TargetFrameworkMoniker)</OrderBy>
        <Attributes>Include="%(Name)" Version="%(Version)" TargetFrameworkMoniker="%(TargetFrameworkMoniker)"</Attributes>
      </DependenciesToLock>
      <DependenciesToAllow Include="@(EveryDependency)" Condition=" '%(Type)' == 'package' ">
        <OrderBy>%(Name) %(Version) %(Sha512)</OrderBy>
        <Attributes>Include="%(Name)" Version="%(Version)" Sha512="%(Sha512)"</Attributes>
      </DependenciesToAllow>
    </ItemGroup>

    <SortItemGroup UnsortedItems="@(DependenciesToLock)" OrderBy="OrderBy">
      <Output ItemName="SortedDependenciesToLock" TaskParameter="SortedItems" />
    </SortItemGroup>
    <SortItemGroup UnsortedItems="@(DependenciesToAllow)" OrderBy="OrderBy">
      <Output ItemName="SortedDependenciesToAllow" TaskParameter="SortedItems" />
    </SortItemGroup>
    <ItemGroup>
      <ProjectLockFileLine1 Include="&lt;Project&gt;" />
      <ProjectLockFileLine1 Include="%20%20&lt;!--" />
      <ProjectLockFileLine1 Include="//==============================================================================" />
      <ProjectLockFileLine1 Include="// &lt;auto-generated&gt;" />
      <ProjectLockFileLine1 Include="//     This code was generated by a tool." />
      <ProjectLockFileLine1 Include="//     Runtime Version:4.0.30319.42000" />
      <ProjectLockFileLine1 Include="//" />
      <ProjectLockFileLine1 Include="//     Changes to this file may cause incorrect behavior and will be lost if" />
      <ProjectLockFileLine1 Include="//     the code is regenerated." />
      <ProjectLockFileLine1 Include="// &lt;/auto-generated&gt;" />
      <ProjectLockFileLine1 Include="//==============================================================================" />
      <ProjectLockFileLine1 Include="%20%20--&gt;" />
      <ProjectLockFileLine1 Include="%20%20&lt;PropertyGroup&gt;" />
      <ProjectLockFileLine1 Include="%20%20%20%20&lt;MsBuildAllProjects&gt;%24(MsBuildAllProjects)%3b%24(MsBuildThisFileFullPath)&lt;/MsBuildAllProjects&gt;" />
      <ProjectLockFileLine1 Include="%20%20&lt;/PropertyGroup&gt;" />
      <ProjectLockFileLine1 Include="%20%20&lt;ItemGroup&gt;" />
      <ProjectLockFileLine2 Include="%20%20%20%20&lt;PackageReferenceLock %(SortedDependenciesToLock.Attributes) /&gt;" Condition=" '@(SortedDependenciesToLock)' != '' " />
      <ProjectLockFileLine3 Include="%20%20%20%20&lt;PackageReferenceAllow %(SortedDependenciesToAllow.Attributes) /&gt;" Condition=" '@(SortedDependenciesToAllow)' != '' " />
      <ProjectLockFileLine4 Include="%20%20&lt;/ItemGroup&gt;" />
      <ProjectLockFileLine4 Include="&lt;/Project&gt;" />
    </ItemGroup>

    <Message Text="Generating $(MSBuildProjectName) -> $(ProjectLockFile)" Importance="high" />
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(ProjectLockFile)'))" />
    <WriteLinesToFile File="$(ProjectLockFile)" Lines="@(ProjectLockFileLine1);@(ProjectLockFileLine2);@(ProjectLockFileLine3);@(ProjectLockFileLine4)" Overwrite="true" />
  </Target>

  <Target Name="GenerateLockFileAfterBuild" DependsOnTargets="GenerateLockFile" AfterTargets="AfterBuild" Condition=" '$(GenerateLockFile)' == 'true' and ('$(DesignTimeBuild)' != 'true' Or Exists('$(ProjectAssetsFile)')) ">
    <!--<Message Text="GenerateLockFileAfterCoreCompile" Importance="high" />-->
  </Target>

  <Target Name="GenerateLockFileAfterRestore" DependsOnTargets="GenerateLockFile" AfterTargets="Restore" Condition=" '$(GenerateLockFile)' == 'true' and ('$(DesignTimeBuild)' != 'true' Or Exists('$(ProjectAssetsFile)')) ">
    <!--<Message Text="GenerateLockFileAfterCoreCompile" Importance="high" />-->
  </Target>

  <!-- VERIFY -->

  <Target Name="ApplyLockFile" DependsOnTargets="ApplyLockFilePerPackage" BeforeTargets="CollectPackageReferences" Condition=" '$(ApplyLockFile)' == 'true' " />

  <Target Name="ApplyLockFilePerPackage" Inputs="@(PackageReferenceLock)" Outputs="%(PackageReferenceLock.Identity)/%(PackageReferenceLock.Version)/%(PackageReferenceLock.TargetFrameworkMoniker)">
    <PropertyGroup>
      <_PackageReferenceLock_Identity>%(PackageReferenceLock.Identity)</_PackageReferenceLock_Identity>
      <_PackageReferenceLock_Version>%(PackageReferenceLock.Version)</_PackageReferenceLock_Version>
      <_PackageReferenceLock_TargetFrameworkMoniker>%(PackageReferenceLock.TargetFrameworkMoniker)</_PackageReferenceLock_TargetFrameworkMoniker>

      <_PackageReferenceLock_IsCorrectContext Condition=" '$(_PackageReferenceLock_TargetFrameworkMoniker)' == '$(TargetFrameworkMoniker)' ">true</_PackageReferenceLock_IsCorrectContext>
    </PropertyGroup>

    <ItemGroup Condition=" '$(_PackageReferenceLock_TargetFrameworkMoniker)' == '$(TargetFrameworkMoniker)' ">
      <PackageReference  Version="$(_PackageReferenceLock_Version)" Condition=" '%(Identity)' == '$(_PackageReferenceLock_Identity)' " />
    </ItemGroup>
  </Target>

  <!-- VERIFY -->

  <Target Name="VerifyLockFileBeforeBuild" DependsOnTargets="VerifyLockFile" AfterTargets="BeforeBuild" Condition=" '$(VerifyLockFile)' == 'true' " />

  <Target Name="GetPackageReferenceAllow" Returns="@(PackageReferenceAllow)" />

  <Target Name="GatherPackageReferenceAllow">
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="GetPackageReferenceAllow" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); %(_MSBuildProjectReferenceExistent.SetTargetFramework);">
      <Output TaskParameter="TargetOutputs" ItemName="PackageReferenceAllow" />
    </MSBuild>
  </Target>

  <Target Name="VerifyLockFile" DependsOnTargets="CalculateAssets;GatherPackageReferenceAllow;VerifyLockFilePackageReferenceAllow">
    <ItemGroup>
      <PackagesNotAllowed Include="@(AssetsPackageDefinitions)" 
        Condition=" '%(AssetsPackageDefinitions.Type)' == 'package' and ('%(AssetsPackageDefinitions.Allowed)' != 'true' or '%(AssetsPackageDefinitions.Denied)' == 'true') ">
        <Example>&lt;PackageReferenceAllow Include="%(Name)" Version="%(Version)" Sha512="%(Sha512)" /&gt;</Example>
      </PackagesNotAllowed>
    </ItemGroup>

    <Warning 
      Text="Unable to verify package. Missing %(PackagesNotAllowed.Example)" 
      Condition=" '@(PackagesNotAllowed)' != '' "  />

    <Error 
      Text="Some packages are not listed as allowed."
      Condition=" '@(PackagesNotAllowed)' != '' " />
  </Target>

  <Target Name="VerifyLockFilePackageReferenceAllow" Inputs="@(PackageReferenceAllow)" Outputs="%(PackageReferenceAllow->'%(Identity)/%(Version)/%(Sha512)')">
    <PropertyGroup>
      <_PackageReferenceAllow_Identity>%(PackageReferenceAllow.Identity)</_PackageReferenceAllow_Identity>
      <_PackageReferenceAllow_Version>%(PackageReferenceAllow.Version)</_PackageReferenceAllow_Version>
      <_PackageReferenceAllow_Sha512>%(PackageReferenceAllow.Sha512)</_PackageReferenceAllow_Sha512>
    </PropertyGroup>
    <ItemGroup>
      <AssetsPackageDefinitions Condition=" '%(Identity)' == '$(_PackageReferenceAllow_Identity)/$(_PackageReferenceAllow_Version)' and '%(Sha512)' == '$(_PackageReferenceAllow_Sha512)' ">
        <Allowed>true</Allowed>
      </AssetsPackageDefinitions>
    </ItemGroup>
  </Target>

</Project>
